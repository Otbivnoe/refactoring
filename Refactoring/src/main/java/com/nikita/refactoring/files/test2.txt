- (void)combineTracks:(NSArray*)tracks combinePath:(NSString*)path deleteCombinedFile:(BOOL)isDelete withCompletion:(void(^)(BOOL success, NSURL *newFileURL))completionBlock{NSError *error = nil;BOOL ok = NO;CMTime nextClipStartTime = kCMTimeZero;AVMutableComposition *composition = [[AVMutableComposition alloc] init];AVMutableCompositionTrack *compositionAudioTrack = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:kCMPersistentTrackID_Invalid];for (AVURLAsset *avAsset in tracks) {CMTimeRange timeRangeInAsset = CMTimeRangeMake(kCMTimeZero, [avAsset duration]);NSArray *clipAudioTracks = [avAsset tracksWithMediaType:AVMediaTypeAudio];if (!clipAudioTracks.count) {continue;}AVAssetTrack *clipAudioTrack = clipAudioTracks.lastObject;ok = [compositionAudioTrack insertTimeRange:timeRangeInAssetofTrack:clipAudioTrackatTime:nextClipStartTime error:&error];if (!ok) {NSLog(@"Current Video Track Error: %@",error);}nextClipStartTime = CMTimeAdd(nextClipStartTime, timeRangeInAsset.duration);}AVAssetExportSession *exportSession = [AVAssetExportSession exportSessionWithAsset:composition presetName:AVAssetExportPresetAppleM4A];if (!exportSession) {if (completionBlock) {completionBlock(NO, nil);}}NSString *combinedFileName = [[NSUUID UUID] UUIDString];NSString *soundOneNew = [path stringByAppendingPathComponent:combinedFileName];if ([[NSFileManager defaultManager] fileExistsAtPath:[soundOneNew stringByAppendingString:@".m4a"]]) {soundOneNew = [soundOneNew stringByAppendingString:@"copy.m4a"];} else {soundOneNew = [soundOneNew stringByAppendingString:@".m4a"];}exportSession.outputURL = [NSURL fileURLWithPath:soundOneNew];exportSession.outputFileType = AVFileTypeAppleM4A;[exportSession exportAsynchronouslyWithCompletionHandler:^{if (AVAssetExportSessionStatusCompleted == exportSession.status) {NSLog(@"AVAssetExportSessionStatusCompleted");if (isDelete) {NSFileManager *fileManager = [NSFileManager defaultManager];NSError *error;for (AVURLAsset *avAsset in tracks) {[fileManager removeItemAtPath:avAsset.URL.path error:&error];}}if (completionBlock) {completionBlock(YES, exportSession.outputURL);}} else {if (completionBlock) {completionBlock(NO, nil);}if (AVAssetExportSessionStatusFailed == exportSession.status) {NSLog(@"AVAssetExportSessionStatusFailed");} else {NSLog(@"Export Session Status: %ld", (long)exportSession.status);}}}];return;}
- (void)stopRecord{[self.audioRecorder stop];}
- (void)playWithFileURL:(NSURL*)fileURL{if (self.audioRecorder.isRecording) {return;}if (![self.audioPlayer.url.absoluteString isEqualToString:fileURL.absoluteString]){AVAudioSession *session = [AVAudioSession sharedInstance];[session setCategory:AVAudioSessionCategorySoloAmbient error:nil];NSError *error = nil;self.audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:fileURL error:&error];self.audioPlayer.delegate = self;[self.audioPlayer play];} else {if ([self.audioPlayer isPlaying]) {[self pausePlaying];} else {[self.audioPlayer play];} }}
- (void)pausePlaying{[self.audioPlayer pause];AVAudioSession *audioSession = [AVAudioSession sharedInstance];[audioSession setActive:NO error:nil];}
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag{if ([self.delegaterespondsToSelector:@selector(audioManagerAudioPlayerDidFinishPlaying:successfully:)]) {[self.delegate audioManagerAudioPlayerDidFinishPlaying:self successfully:flag];}}- (CGFloat)averangeMetering{[self.audioRecorder updateMeters];return [_audioRecorder averagePowerForChannel:0];}- (BOOL)isRecording{return _audioRecorder.isRecording;}- (NSTimeInterval)recordingTime{return _audioRecorder.currentTime;}- (NSTimeInterval)currentTime{return _audioPlayer.currentTime;}- (NSTimeInterval)duration{return _audioPlayer.duration;}

@end
